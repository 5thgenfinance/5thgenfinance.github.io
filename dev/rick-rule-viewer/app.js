// Rick Rule Stock Analysis Viewer - GitHub Pages Version
// This version loads data from static JSON file generated by GitHub Actions

// Global variables
let allCompanies = [];
let tickerOptions = [];
let companyOptions = [];

// Initialize the application
document.addEventListener('DOMContentLoaded', function() {
    loadStaticData();
});

// Load data from static JSON file (generated by GitHub Actions)
async function loadStaticData() {
    try {
        showLoading('Loading companies...');
        
        const response = await fetch('./data/companies.json');
        if (!response.ok) {
            throw new Error('Failed to load companies data');
        }
        
        const data = await response.json();
        
        // Handle both old and new data format
        const companies = data.companies || data;
        processCompanyData(companies);
        
        // Show last updated info if available
        if (data.lastUpdated) {
            updateLastUpdatedInfo(data.lastUpdated);
        }
        
    } catch (error) {
        console.error('Error loading data:', error);
        // Fallback to demo data
        loadDemoData();
    }
}

// Process company data for dropdowns
function processCompanyData(companies) {
    allCompanies = companies;
    
    // Extract unique tickers and company names
    const tickers = new Set();
    const companyNames = new Set();
    
    companies.forEach(company => {
        if (company.ticker && company.ticker.trim()) {
            tickers.add(company.ticker.trim());
        }
        if (company.company_name && company.company_name.trim()) {
            companyNames.add(company.company_name.trim());
        }
    });
    
    // Sort and populate dropdowns
    tickerOptions = Array.from(tickers).sort();
    companyOptions = Array.from(companyNames).sort();
    
    populateDropdown('tickerSelect', tickerOptions);
    populateDropdown('companySelect', companyOptions);
    
    hideLoading();
}

// Populate dropdown with options
function populateDropdown(selectId, options) {
    const select = document.getElementById(selectId);
    const defaultOption = select.querySelector('option[value=""]');
    
    // Clear existing options except default
    select.innerHTML = '';
    if (defaultOption) {
        select.appendChild(defaultOption);
    } else {
        const newDefault = document.createElement('option');
        newDefault.value = '';
        newDefault.textContent = selectId === 'tickerSelect' ? '-- Select Ticker --' : '-- Select Company --';
        select.appendChild(newDefault);
    }
    
    // Add new options
    options.forEach(option => {
        const optionElement = document.createElement('option');
        optionElement.value = option;
        optionElement.textContent = option;
        select.appendChild(optionElement);
    });
}

// Search companies based on selected criteria
function searchCompanies() {
    const ticker = document.getElementById('tickerSelect').value;
    const company = document.getElementById('companySelect').value;
    
    if (!ticker && !company) {
        showError('Please select either a ticker or company name to search.');
        return;
    }
    
    // Filter data locally
    const results = allCompanies.filter(item => {
        const tickerMatch = !ticker || (item.ticker && item.ticker.toLowerCase().includes(ticker.toLowerCase()));
        const companyMatch = !company || (item.company_name && item.company_name.toLowerCase().includes(company.toLowerCase()));
        return tickerMatch && companyMatch;
    });
    
    displayResults(results);
}

// Load all companies
function loadAllCompanies() {
    displayResults(allCompanies);
}

// Display search results
function displayResults(results) {
    const resultsPane = document.getElementById('resultsPane');
    const resultsCount = document.getElementById('resultsCount');
    
    // Update count
    const count = results.length;
    resultsCount.textContent = `${count} ${count === 1 ? 'company' : 'companies'} found`;
    
    if (count === 0) {
        resultsPane.innerHTML = '<div class="no-results">No companies found matching your search criteria.</div>';
        return;
    }
    
    // Generate HTML for results
    const html = results.map(company => createCompanyCard(company)).join('');
    resultsPane.innerHTML = html;
}

// Create HTML for a company card
function createCompanyCard(company) {
    const ticker = company.ticker || 'N/A';
    const companyName = company.company_name || 'Unknown Company';
    const rating = company.most_recent_rating || company.company_rating;
    const ownership = company.ownership;
    const posComments = company.pos_comments || 'No positive comments available.';
    const negComments = company.neg_comments || 'No negative comments available.';
    const asofdate = company.asofdate || 'Unknown date';
    const source = company.source || '#';
    const publication = company.publication || 'Unknown source';
    
    // Determine rating class and display
    let ratingClass = 'unknown';
    let ratingDisplay = 'N/A';
    
    if (rating !== null && rating !== undefined) {
        ratingDisplay = rating;
        if (rating <= 3) ratingClass = 'excellent';
        else if (rating <= 5) ratingClass = 'good';
        else if (rating <= 7) ratingClass = 'average';
        else ratingClass = 'poor';
    }
    
    // Determine ownership display
    let ownershipClass = 'unknown';
    let ownershipDisplay = 'Unknown';
    
    if (ownership === 1) {
        ownershipClass = 'owns';
        ownershipDisplay = 'Owns';
    } else if (ownership === 0) {
        ownershipClass = 'not-owns';
        ownershipDisplay = 'Does Not Own';
    }
    
    return `
        <div class="company-card">
            <div class="company-header">
                <div class="company-title">
                    <div class="company-ticker">${escapeHtml(ticker)}</div>
                    <div class="company-name">${escapeHtml(companyName)}</div>
                </div>
                <div class="company-meta">
                    <div class="rating ${ratingClass}">Rating: ${ratingDisplay}</div>
                    <div class="ownership ${ownershipClass}">${ownershipDisplay}</div>
                    <div class="source-info">
                        <div>${escapeHtml(asofdate)}</div>
                        <div><a href="${escapeHtml(source)}" target="_blank">${escapeHtml(publication)}</a></div>
                    </div>
                </div>
            </div>
            
            <div class="comments-section">
                <div class="comment-box positive-comments">
                    <div class="comment-label">Positive Comments</div>
                    <div class="comment-text">${escapeHtml(posComments)}</div>
                </div>
                <div class="comment-box negative-comments">
                    <div class="comment-label">Negative Comments</div>
                    <div class="comment-text">${escapeHtml(negComments)}</div>
                </div>
            </div>
        </div>
    `;
}

// Clear search form
function clearSearch() {
    document.getElementById('tickerSelect').value = '';
    document.getElementById('companySelect').value = '';
    document.getElementById('resultsPane').innerHTML = '<div class="no-results">Use the search controls above to find companies or click "Show All" to display all available data.</div>';
    document.getElementById('resultsCount').textContent = '0 companies found';
}

// Show loading state
function showLoading(message = 'Loading...') {
    const resultsPane = document.getElementById('resultsPane');
    resultsPane.innerHTML = `<div class="loading">${message}</div>`;
}

// Hide loading state
function hideLoading() {
    // Loading will be replaced by results or error message
}

// Show error message
function showError(message) {
    const resultsPane = document.getElementById('resultsPane');
    resultsPane.innerHTML = `<div class="error">${escapeHtml(message)}</div>`;
}

// Update last updated info
function updateLastUpdatedInfo(lastUpdated) {
    const date = new Date(lastUpdated).toLocaleDateString();
    const time = new Date(lastUpdated).toLocaleTimeString();
    
    // Add info to header if it doesn't exist
    let infoElement = document.getElementById('lastUpdated');
    if (!infoElement) {
        infoElement = document.createElement('p');
        infoElement.id = 'lastUpdated';
        infoElement.style.cssText = 'color: #888; font-size: 12px; margin-top: 5px; text-align: center;';
        document.querySelector('header .header-content div').appendChild(infoElement);
    }
    
    infoElement.textContent = `Data last updated: ${date} at ${time}`;
}

// Utility function to escape HTML
function escapeHtml(text) {
    if (text === null || text === undefined) {
        return '';
    }
    
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

// Load demo data as fallback
function loadDemoData() {
    allCompanies = [
        {
            ticker: "CCO",
            company_name: "Cameco",
            most_recent_rating: null,
            ownership: 1,
            pos_comments: "Way long Cameco - only uranium stock didn't sell when emerged from hated status. Operating numbers suggest they know engineering or are leaving Westinghouse alone. Pricing flexibility as old contracts wear off.",
            neg_comments: "Previous concern about Westinghouse acquisition and whether miners knew anything about engineering.",
            asofdate: "2025-08-21",
            source: "https://www.youtube.com/watch?v=Iee-AXNxA3Y",
            publication: "Rule Investment Media"
        },
        {
            ticker: "UUUU",
            company_name: "Energy Fuels",
            most_recent_rating: 5,
            ownership: null,
            pos_comments: "Increased ranking from 6 to 5. Ability to process heavy rare earths on bench scale. Uniquely positioned to obtain subsidized financing for both rare earths and uranium businesses.",
            neg_comments: "Previously would have been vilified for uranium and vanadium mining activities.",
            asofdate: "2025-08-21",
            source: "https://www.youtube.com/watch?v=Iee-AXNxA3Y",
            publication: "Rule Investment Media"
        },
        {
            ticker: "MGM",
            company_name: "Magnum Mining",
            most_recent_rating: null,
            ownership: 1,
            pos_comments: "Likes exploration results in Sudbury, adult supervision from Dundee backing, loves idea of consolidating Sudbury district. Currently buying the stock.",
            neg_comments: null,
            asofdate: "2025-08-21",
            source: "https://www.youtube.com/watch?v=Iee-AXNxA3Y",
            publication: "Rule Investment Media"
        },
        {
            ticker: "NXE",
            company_name: "NexGen Energy",
            most_recent_rating: 2,
            ownership: 1,
            pos_comments: "Best undeveloped uranium deposit in the world. Management team with proven track record. Arrow deposit is world-class.",
            neg_comments: "High valuation relative to peers. Permitting timeline uncertainty.",
            asofdate: "2025-08-21",
            source: "https://www.youtube.com/watch?v=Iee-AXNxA3Y",
            publication: "Rule Investment Media"
        }
    ];
    
    processCompanyData(allCompanies);
}